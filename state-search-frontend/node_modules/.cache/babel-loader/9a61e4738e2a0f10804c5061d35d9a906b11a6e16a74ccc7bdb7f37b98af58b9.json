{"ast":null,"code":"export default {\n  data() {\n    return {\n      searchTerm: '',\n      states: [],\n      filteredStates: [],\n      selectedState: '',\n      // Stores the selected state\n      loading: false,\n      error: null,\n      map: null\n    };\n  },\n  methods: {\n    async onSearch() {\n      if (this.searchTerm.length < 1) {\n        this.filteredStates = [];\n        return;\n      }\n      this.loading = true;\n      this.error = null;\n      const query = `\n        query {\n          states {\n            id\n            name\n          }\n        }\n      `;\n      try {\n        const response = await fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const {\n          data\n        } = await response.json();\n        this.states = data.states;\n        this.filteredStates = this.filterStates();\n      } catch (err) {\n        this.error = 'Failed to fetch states: ' + err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    filterStates() {\n      const searchTermLower = this.searchTerm.toLowerCase();\n      return this.states.filter(state => state.name.toLowerCase().startsWith(searchTermLower));\n    },\n    highlightMatch(stateName) {\n      const searchTerm = this.searchTerm;\n      if (!searchTerm) return stateName;\n      const regex = new RegExp(`(${searchTerm})`, 'gi');\n      return stateName.replace(regex, '<strong>$1</strong>');\n    },\n    selectState(stateName) {\n      this.searchTerm = stateName; // Autofill the search input with the clicked state name\n      this.filteredStates = []; // Clear the dropdown after selection\n      this.selectedState = stateName; // Update selectedState to highlight on the map\n    },\n    // Highlight the selected state on the map\n    highlightState(stateName) {\n      if (!stateName || !this.map) return;\n      const stateCoordinates = {\n        'Alabama': {\n          paths: [/* Alabama coordinates */],\n          options: {\n            fillColor: 'yellow'\n          }\n        },\n        'California': {\n          paths: [/* California coordinates */],\n          options: {\n            fillColor: 'blue'\n          }\n        }\n      };\n      if (stateCoordinates[stateName]) {\n        // eslint-disable-next-line no-undef\n        new google.maps.Polygon({\n          ...stateCoordinates[stateName].options,\n          paths: stateCoordinates[stateName].paths,\n          // eslint-disable-next-line no-undef\n          map: this.map\n        });\n      }\n    }\n  },\n  mounted() {\n    const loader = new Loader({\n      apiKey: 'AIzaSyB1-psa7VQjYCGqGVYsLJVrOfdnYOYQuFs',\n      version: 'weekly'\n    });\n    loader.load().then(() => {\n      // eslint-disable-next-line no-undef\n      const mapOptions = {\n        center: {\n          lat: 37.1,\n          lng: -95.7\n        },\n        // Centered in the US\n        zoom: 4\n      };\n\n      // eslint-disable-next-line no-undef\n      this.map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    });\n\n    // Watch for changes to the selectedState and highlight it on the map\n    this.$watch('selectedState', newVal => {\n      this.highlightState(newVal);\n    });\n  }\n};","map":{"version":3,"names":["data","searchTerm","states","filteredStates","selectedState","loading","error","map","methods","onSearch","length","query","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","filterStates","err","message","searchTermLower","toLowerCase","filter","state","name","startsWith","highlightMatch","stateName","regex","RegExp","replace","selectState","highlightState","stateCoordinates","paths","options","fillColor","google","maps","Polygon","mounted","loader","Loader","apiKey","version","load","then","mapOptions","center","lat","lng","zoom","Map","document","getElementById","$watch","newVal"],"sources":["D:\\state_search_demo\\state-search-app\\src\\components\\StateSearch.vue"],"sourcesContent":["<template>\n  <div class=\"search-container\">\n    <!-- Search Box -->\n    <div class=\"search-box\">\n      <input\n        v-model=\"searchTerm\"\n        @input=\"onSearch\"\n        placeholder=\"Type a state name\"\n        autocomplete=\"off\"\n      />\n      <ul v-if=\"filteredStates.length\" class=\"dropdown\">\n        <li\n          v-for=\"state in filteredStates\"\n          :key=\"state.id\"\n          v-html=\"highlightMatch(state.name)\"\n          @click=\"selectState(state.name)\"\n        >\n        </li>\n      </ul>\n    </div>\n\n    <div v-if=\"loading\">Loading...</div>\n    <div v-if=\"error\">{{ error }}</div>\n\n    <!-- Google Map Container -->\n    <div id=\"map\" class=\"map-container\"></div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      searchTerm: '',\n      states: [],\n      filteredStates: [],\n      selectedState: '', // Stores the selected state\n      loading: false,\n      error: null,\n      map: null,\n    };\n  },\n  methods: {\n    async onSearch() {\n      if (this.searchTerm.length < 1) {\n        this.filteredStates = [];\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      const query = `\n        query {\n          states {\n            id\n            name\n          }\n        }\n      `;\n\n      try {\n        const response = await fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query }),\n        });\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        const { data } = await response.json();\n        this.states = data.states;\n        this.filteredStates = this.filterStates();\n      } catch (err) {\n        this.error = 'Failed to fetch states: ' + err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    filterStates() {\n      const searchTermLower = this.searchTerm.toLowerCase();\n      return this.states.filter(state =>\n        state.name.toLowerCase().startsWith(searchTermLower)\n      );\n    },\n\n    highlightMatch(stateName) {\n      const searchTerm = this.searchTerm;\n      if (!searchTerm) return stateName;\n\n      const regex = new RegExp(`(${searchTerm})`, 'gi');\n      return stateName.replace(regex, '<strong>$1</strong>');\n    },\n\n    selectState(stateName) {\n      this.searchTerm = stateName; // Autofill the search input with the clicked state name\n      this.filteredStates = [];    // Clear the dropdown after selection\n      this.selectedState = stateName; // Update selectedState to highlight on the map\n    },\n\n    // Highlight the selected state on the map\n    highlightState(stateName) {\n      if (!stateName || !this.map) return;\n\n      const stateCoordinates = {\n        'Alabama': { paths: [/* Alabama coordinates */], options: { fillColor: 'yellow' } },\n        'California': { paths: [/* California coordinates */], options: { fillColor: 'blue' } },\n      };\n\n      if (stateCoordinates[stateName]) {\n        // eslint-disable-next-line no-undef\n        new google.maps.Polygon({\n          ...stateCoordinates[stateName].options,\n          paths: stateCoordinates[stateName].paths,\n          // eslint-disable-next-line no-undef\n          map: this.map,\n        });\n      }\n    },\n  },\n  mounted() {\n    const loader = new Loader({\n      apiKey: 'AIzaSyB1-psa7VQjYCGqGVYsLJVrOfdnYOYQuFs', \n      version: 'weekly',\n    });\n\n    loader.load().then(() => {\n      // eslint-disable-next-line no-undef\n      const mapOptions = {\n        center: { lat: 37.1, lng: -95.7 }, // Centered in the US\n        zoom: 4,\n      };\n\n      // eslint-disable-next-line no-undef\n      this.map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    });\n\n    // Watch for changes to the selectedState and highlight it on the map\n    this.$watch('selectedState', (newVal) => {\n      this.highlightState(newVal);\n    });\n  },\n};\n</script>\n\n<style scoped>\n/* Styles for the search and dropdown */\n.search-container {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n}\n\n.search-box {\n  position: relative;\n  width: 300px;\n}\n\ninput {\n  padding: 10px;\n  width: 100%;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.dropdown {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  width: 100%;\n  background-color: white;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  max-height: 200px;\n  overflow-y: auto;\n  z-index: 1000;\n  margin-top: 5px;\n  padding: 0;\n  list-style: none;\n}\n\n.dropdown li {\n  padding: 8px;\n  cursor: pointer;\n}\n\n.dropdown li:hover {\n  background-color: #f0f0f0;\n}\n\n#map {\n  width: 100%;\n  height: 500px;\n  margin-top: 50px; /* Adjust this value to move the map lower */\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}