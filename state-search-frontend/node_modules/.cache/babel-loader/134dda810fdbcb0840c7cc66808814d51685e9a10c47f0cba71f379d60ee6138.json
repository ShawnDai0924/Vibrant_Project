{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"map\",\n  class: \"map-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vibrant_project\\state-search-frontend\\src\\components\\MapView.vue"],"sourcesContent":["\r\n<template>\r\n    <div id=\"map\" class=\"map-container\"></div>\r\n  </template>\r\n  \r\n  <script>\r\n  // Import the Loader from '@googlemaps/js-api-loader'\r\n  /* eslint-disable */\r\n  import { Loader } from '@googlemaps/js-api-loader';\r\n  \r\n  export default {\r\n    props: {\r\n      selectedState: {\r\n        type: String,\r\n        required: false,\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        map: null,\r\n        stateLayer: null, // To store the state boundaries\r\n      };\r\n    },\r\n    watch: {\r\n      selectedState(newVal) {\r\n        if (newVal) {\r\n          this.highlightState(newVal); // Highlight the new state whenever it changes\r\n        }\r\n      }\r\n    },\r\n    mounted() {\r\n      const loader = new Loader({\r\n        apiKey: 'AIzaSyB1-psa7VQjYCGqGVYsLJVrOfdnYOYQuFs',\r\n        version: 'weekly',\r\n      });\r\n  \r\n      loader.load().then(() => {\r\n        \r\n        const mapOptions = {\r\n          center: { lat: 37.1, lng: -95.7 }, // Centered in the US\r\n          zoom: 4,\r\n        };\r\n  \r\n        \r\n        this.map = new google.maps.Map(document.getElementById('map'), mapOptions);\r\n  \r\n        // Initialize the data layer\r\n        \r\n        this.stateLayer = new google.maps.Data({ map: this.map });\r\n      });\r\n    },\r\n    methods: {\r\n      // Highlight the selected state by loading GeoJSON and clearing old data\r\n      highlightState(stateName) {\r\n        if (!this.map || !this.stateLayer) return;\r\n  \r\n        this.stateLayer.forEach((feature) => {\r\n          this.stateLayer.remove(feature);\r\n        });\r\n  \r\n        \r\n        const geoJsonUrl = `https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json`; // Example GeoJSON source\r\n  \r\n        // Load GeoJSON data for the new state\r\n        this.stateLayer.loadGeoJson(geoJsonUrl, null, () => {\r\n          // Filter and remove all non-matching features\r\n          this.stateLayer.forEach((feature) => {\r\n            if (feature.getProperty('name') !== stateName) {\r\n              this.stateLayer.remove(feature);\r\n            }\r\n          });\r\n  \r\n          // Style the selected state boundary\r\n          this.stateLayer.setStyle({\r\n            fillColor: 'yellow',\r\n            strokeWeight: 2,\r\n          });\r\n  \r\n          // Zoom in on the selected state\r\n          this.map.fitBounds(this.getFeatureBounds(this.stateLayer));\r\n        });\r\n      },\r\n  \r\n      // Helper function to get the bounds of a GeoJSON feature\r\n      getFeatureBounds(layer) {\r\n        // eslint-disable-next-line no-undef\r\n        const bounds = new google.maps.LatLngBounds();\r\n        layer.forEach((feature) => {\r\n          const geometry = feature.getGeometry();\r\n          geometry.forEachLatLng((latLng) => {\r\n            bounds.extend(latLng);\r\n          });\r\n        });\r\n        return bounds;\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  #map {\r\n    width: 100%;\r\n    height: 500px;\r\n    margin-top: 50px;\r\n  }\r\n  </style>\r\n  "],"mappings":";;EAESA,EAAE,EAAC,KAAK;EAACC,KAAK,EAAC;;;uBAApBC,mBAAA,CAA0C,OAA1CC,UAA0C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}