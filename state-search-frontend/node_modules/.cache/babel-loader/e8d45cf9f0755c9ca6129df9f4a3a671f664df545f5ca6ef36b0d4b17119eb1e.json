{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"search-container\"\n};\nconst _hoisted_2 = {\n  class: \"search-box\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"dropdown\"\n};\nconst _hoisted_4 = [\"innerHTML\", \"onClick\"];\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchTerm = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.onSearch && $options.onSearch(...args)),\n    placeholder: \"Type a state name\",\n    autocomplete: \"off\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.searchTerm]]), $data.filteredStates.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.filteredStates, state => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: state.id,\n      innerHTML: $options.highlightMatch(state.name),\n      onClick: $event => $options.selectState(state.name)\n    }, null, 8 /* PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]), $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, \"Loading...\")) : _createCommentVNode(\"v-if\", true), $data.error ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _toDisplayString($data.error), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_cache","$event","$data","searchTerm","onInput","args","$options","onSearch","placeholder","autocomplete","filteredStates","length","_hoisted_3","_Fragment","_renderList","state","id","innerHTML","highlightMatch","name","onClick","selectState","_hoisted_4","_createCommentVNode","loading","_hoisted_5","error","_hoisted_6","_toDisplayString"],"sources":["D:\\state_search_demo\\state-search-app\\src\\components\\StateSearch.vue"],"sourcesContent":["<template>\n  <div class=\"search-container\">\n    <div class=\"search-box\">\n      <input\n        v-model=\"searchTerm\"\n        @input=\"onSearch\"\n        placeholder=\"Type a state name\"\n        autocomplete=\"off\"\n      />\n      <ul v-if=\"filteredStates.length\" class=\"dropdown\">\n        <li v-for=\"state in filteredStates\" :key=\"state.id\" v-html=\"highlightMatch(state.name)\" @click=\"selectState(state.name)\">\n        </li>\n      </ul>\n    </div>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-if=\"error\">{{ error }}</div>\n  </div>\n</template>\n\n\n<script>\nexport default {\n  data() {\n    return {\n      searchTerm: '',\n      states: [],\n      filteredStates: [],\n      loading: false,\n      error: null,\n    };\n  },\n  methods: {\n    async onSearch() {\n      if (this.searchTerm.length < 1) {\n        this.filteredStates = [];\n        return;\n      }\n\n\n      this.loading = true;\n      this.error = null;\n\n\n      const query = `\n        query {\n          states {\n            id\n            name\n          }\n        }\n      `;\n\n\n      try {\n        const response = await fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query }),\n        });\n\n\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n\n        const { data } = await response.json();\n        this.states = data.states;\n        this.filteredStates = this.filterStates();\n      } catch (err) {\n        this.error = 'Failed to fetch states: ' + err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n\n    filterStates() {\n      const searchTermLower = this.searchTerm.toLowerCase();\n      return this.states.filter(state =>\n        state.name.toLowerCase().startsWith(searchTermLower)\n      );\n    },\n\n\n    highlightMatch(stateName) {\n      const searchTerm = this.searchTerm;\n      if (!searchTerm) return stateName;\n\n\n      const regex = new RegExp(`(${searchTerm})`, 'gi');\n      return stateName.replace(regex, '<strong>$1</strong>');\n    },\n\n\n    // Function to handle the selection of a state from the dropdown\n    selectState(stateName) {\n      this.searchTerm = stateName; // Autofill the search input with the clicked state name\n      this.filteredStates = [];    // Clear the dropdown after selection\n    }\n  }\n};\n</script>\n\n\n<!-- Import CSS file -->\nimport './styles.css';\n"],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAY;;EAF3BC,GAAA;EASuCD,KAAK,EAAC;;mBAT7C;;EAAAC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAeM,OAfNC,UAeM,GAdJC,mBAAA,CAWM,OAXNC,UAWM,G,gBAVJD,mBAAA,CAKE;IARR,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAIiBC,KAAA,CAAAC,UAAU,GAAAF,MAAA;IAClBG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,QAAA,IAAAD,QAAA,CAAAC,QAAA,IAAAF,IAAA,CAAQ;IAChBG,WAAW,EAAC,mBAAmB;IAC/BC,YAAY,EAAC;iEAHJP,KAAA,CAAAC,UAAU,E,GAKXD,KAAA,CAAAQ,cAAc,CAACC,MAAM,I,cAA/Bf,mBAAA,CAGK,MAHLgB,UAGK,I,kBAFHhB,mBAAA,CACKiB,SAAA,QAXbC,WAAA,CAU4BZ,KAAA,CAAAQ,cAAc,EAAvBK,KAAK;yBAAhBnB,mBAAA,CACK;MADgCD,GAAG,EAAEoB,KAAK,CAACC,EAAE;MAAEC,SAAmC,EAA3BX,QAAA,CAAAY,cAAc,CAACH,KAAK,CAACI,IAAI;MAAIC,OAAK,EAAAnB,MAAA,IAAEK,QAAA,CAAAe,WAAW,CAACN,KAAK,CAACI,IAAI;4BAV9HG,UAAA;sCAAAC,mBAAA,e,GAcerB,KAAA,CAAAsB,OAAO,I,cAAlB5B,mBAAA,CAAoC,OAdxC6B,UAAA,EAcwB,YAAU,KAdlCF,mBAAA,gBAeerB,KAAA,CAAAwB,KAAK,I,cAAhB9B,mBAAA,CAAmC,OAfvC+B,UAAA,EAAAC,gBAAA,CAeyB1B,KAAA,CAAAwB,KAAK,oBAf9BH,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}