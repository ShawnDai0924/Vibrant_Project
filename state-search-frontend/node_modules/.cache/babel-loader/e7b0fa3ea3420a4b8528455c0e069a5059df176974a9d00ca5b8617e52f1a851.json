{"ast":null,"code":"export default {\n  data() {\n    return {\n      searchTerm: '',\n      states: [],\n      loading: false,\n      error: null\n    };\n  },\n  methods: {\n    // Triggers when the user types into the search input\n    async onSearch() {\n      if (this.searchTerm.length < 1) {\n        this.filteredStates = [];\n        return;\n      }\n\n      // Set loading to true and clear any previous error\n      this.loading = true;\n      this.error = null;\n\n      // GraphQL query to fetch the list of states\n      const query = `\n        query {\n          states {\n            id\n            name\n          }\n        }\n      `;\n      // Send GraphQL request to the server\n      try {\n        const response = await fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query\n          })\n        });\n\n        // Parse the JSON response and update the states array\n        const {\n          data\n        } = await response.json();\n        this.states = data.states;\n        this.filteredStates = this.filterStates(); // Filter states based on the search term\n      } catch (err) {\n        // Handle any errors that occur during fetching\n        this.error = 'Failed to fetch states: ' + err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    // Filter the states based on the search term\n    filterStates() {\n      const searchTermLower = this.searchTerm.toLowerCase();\n      return this.states.filter(state => state.name.toLowerCase().startsWith(searchTermLower));\n    },\n    // Highlight matching text in the state names\n    highlightMatch(stateName) {\n      const searchTerm = this.searchTerm;\n\n      // Match the search term in a case-insensitive way\n      const regex = new RegExp(`(${searchTerm})`, 'gi');\n      return stateName.replace(regex, '<strong>$1</strong>');\n    },\n    // When a state is selected from the dropdown\n    selectState(stateName) {\n      this.$emit('state-selected', stateName);\n      this.searchTerm = stateName;\n      this.filteredStates = [];\n    }\n  }\n};","map":{"version":3,"names":["data","searchTerm","states","loading","error","methods","onSearch","length","filteredStates","query","response","fetch","method","headers","body","JSON","stringify","json","filterStates","err","message","searchTermLower","toLowerCase","filter","state","name","startsWith","highlightMatch","stateName","regex","RegExp","replace","selectState","$emit"],"sources":["D:\\vibrant_project\\state-search-frontend\\src\\components\\StateSearch.vue"],"sourcesContent":["<template>\n  <div class=\"search-container\">\n    <div class=\"search-box\">\n      <input\n        v-model=\"searchTerm\"\n        @input=\"onSearch\"\n        placeholder=\"Search\"\n\n      />\n      <!-- Dropdown list -->\n      <ul v-if=\"filteredStates.length\" class=\"dropdown\">\n        <li\n          v-for=\"state in filteredStates\"\n          :key=\"state.id\"\n          v-html=\"highlightMatch(state.name)\"\n          @click=\"selectState(state.name)\"\n        >\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      searchTerm: '', \n      states: [],          \n      loading: false,      \n      error: null,         \n    };\n  },\n  methods: {\n    // Triggers when the user types into the search input\n    async onSearch() {\n\n      if (this.searchTerm.length < 1) {\n        this.filteredStates = [];\n        return;\n      }\n\n      // Set loading to true and clear any previous error\n      this.loading = true;\n      this.error = null;\n\n      // GraphQL query to fetch the list of states\n      const query = `\n        query {\n          states {\n            id\n            name\n          }\n        }\n      `;\n      // Send GraphQL request to the server\n      try {\n        \n        const response = await fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query }),\n        });\n\n\n        // Parse the JSON response and update the states array\n        const { data } = await response.json();\n        this.states = data.states;\n        this.filteredStates = this.filterStates();  // Filter states based on the search term\n      } catch (err) {\n        // Handle any errors that occur during fetching\n        this.error = 'Failed to fetch states: ' + err.message;\n      } finally {\n  \n        this.loading = false;\n      }\n    },\n\n    // Filter the states based on the search term\n    filterStates() {\n      const searchTermLower = this.searchTerm.toLowerCase();  \n      return this.states.filter(state =>\n        state.name.toLowerCase().startsWith(searchTermLower) \n      );\n    },\n\n    // Highlight matching text in the state names\n    highlightMatch(stateName) {\n      const searchTerm = this.searchTerm;\n\n\n      // Match the search term in a case-insensitive way\n      const regex = new RegExp(`(${searchTerm})`, 'gi');\n      return stateName.replace(regex, '<strong>$1</strong>');  \n    },\n\n    // When a state is selected from the dropdown\n    selectState(stateName) {\n      this.$emit('state-selected', stateName);  \n      this.searchTerm = stateName;              \n      this.filteredStates = [];                 \n    }\n  }\n};\n</script>\n"],"mappings":"AAwBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,MAAM,EAAE,EAAE;MACVC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,QAAQA,CAAA,EAAG;MAEf,IAAI,IAAI,CAACL,UAAU,CAACM,MAAK,GAAI,CAAC,EAAE;QAC9B,IAAI,CAACC,cAAa,GAAI,EAAE;QACxB;MACF;;MAEA;MACA,IAAI,CAACL,OAAM,GAAI,IAAI;MACnB,IAAI,CAACC,KAAI,GAAI,IAAI;;MAEjB;MACA,MAAMK,KAAI,GAAI;;;;;;;OAOb;MACD;MACA,IAAI;QAEF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,+BAA+B,EAAE;UAC5DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEP;UAAM,CAAC;QAChC,CAAC,CAAC;;QAGF;QACA,MAAM;UAAET;QAAK,IAAI,MAAMU,QAAQ,CAACO,IAAI,CAAC,CAAC;QACtC,IAAI,CAACf,MAAK,GAAIF,IAAI,CAACE,MAAM;QACzB,IAAI,CAACM,cAAa,GAAI,IAAI,CAACU,YAAY,CAAC,CAAC,EAAG;MAC9C,EAAE,OAAOC,GAAG,EAAE;QACZ;QACA,IAAI,CAACf,KAAI,GAAI,0BAAyB,GAAIe,GAAG,CAACC,OAAO;MACvD,UAAU;QAER,IAAI,CAACjB,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED;IACAe,YAAYA,CAAA,EAAG;MACb,MAAMG,eAAc,GAAI,IAAI,CAACpB,UAAU,CAACqB,WAAW,CAAC,CAAC;MACrD,OAAO,IAAI,CAACpB,MAAM,CAACqB,MAAM,CAACC,KAAI,IAC5BA,KAAK,CAACC,IAAI,CAACH,WAAW,CAAC,CAAC,CAACI,UAAU,CAACL,eAAe,CACrD,CAAC;IACH,CAAC;IAED;IACAM,cAAcA,CAACC,SAAS,EAAE;MACxB,MAAM3B,UAAS,GAAI,IAAI,CAACA,UAAU;;MAGlC;MACA,MAAM4B,KAAI,GAAI,IAAIC,MAAM,CAAC,IAAI7B,UAAU,GAAG,EAAE,IAAI,CAAC;MACjD,OAAO2B,SAAS,CAACG,OAAO,CAACF,KAAK,EAAE,qBAAqB,CAAC;IACxD,CAAC;IAED;IACAG,WAAWA,CAACJ,SAAS,EAAE;MACrB,IAAI,CAACK,KAAK,CAAC,gBAAgB,EAAEL,SAAS,CAAC;MACvC,IAAI,CAAC3B,UAAS,GAAI2B,SAAS;MAC3B,IAAI,CAACpB,cAAa,GAAI,EAAE;IAC1B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}