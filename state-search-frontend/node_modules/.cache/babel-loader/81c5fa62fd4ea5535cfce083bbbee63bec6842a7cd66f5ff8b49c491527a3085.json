{"ast":null,"code":"// Import the Google Maps API loader\nimport { Loader } from '@googlemaps/js-api-loader';\nexport default {\n  props: {\n    // The selected state name passed from the parent component\n    selectedState: {\n      type: String,\n      required: false\n    }\n  },\n  data() {\n    return {\n      map: null,\n      // Google Maps instance\n      stateLayer: null // Layer to display state boundaries\n    };\n  },\n  watch: {\n    // Watch for changes in the selected state and highlight it\n    selectedState(newVal) {\n      if (newVal) {\n        this.highlightState(newVal); // Call the method to highlight the selected state\n      }\n    }\n  },\n  mounted() {\n    // Load the Google Maps API\n    const loader = new Loader({\n      apiKey: 'AIzaSyB1-psa7VQjYCGqGVYsLJVrOfdnYOYQuFs',\n      version: 'weekly'\n    });\n    loader.load().then(() => {\n      // Initialize the map centered in the US\n      const mapOptions = {\n        center: {\n          lat: 37.1,\n          lng: -95.7\n        },\n        // Center of the US\n        zoom: 4\n      };\n\n      // Create the Google Maps instance\n      this.map = new google.maps.Map(document.getElementById('map'), mapOptions);\n\n      // Create a Data layer to handle GeoJSON state boundaries\n      this.stateLayer = new google.maps.Data({\n        map: this.map\n      });\n    });\n  },\n  methods: {\n    // Highlight the selected state on the map\n    highlightState(stateName) {\n      if (!this.map || !this.stateLayer) return;\n\n      // Remove any previously highlighted state\n      this.stateLayer.forEach(feature => {\n        this.stateLayer.remove(feature);\n      });\n\n      // Load GeoJSON data containing state boundaries\n      const geoJsonUrl = `https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json`;\n\n      // Load the GeoJSON and filter out all but the selected state\n      this.stateLayer.loadGeoJson(geoJsonUrl, null, () => {\n        this.stateLayer.forEach(feature => {\n          if (feature.getProperty('name') !== stateName) {\n            this.stateLayer.remove(feature); // Remove non-matching states\n          }\n        });\n\n        // Style the selected state with a yellow fill and border\n        this.stateLayer.setStyle({\n          fillColor: 'yellow',\n          strokeWeight: 2\n        });\n\n        // Adjust the map view to fit the bounds of the selected state\n        this.map.fitBounds(this.getFeatureBounds(this.stateLayer));\n      });\n    },\n    // Get the geographic bounds of a state from the Data layer\n    getFeatureBounds(layer) {\n      const bounds = new google.maps.LatLngBounds();\n      layer.forEach(feature => {\n        const geometry = feature.getGeometry();\n        geometry.forEachLatLng(latLng => {\n          bounds.extend(latLng); // Extend bounds to include each point in the geometry\n        });\n      });\n      return bounds;\n    }\n  }\n};","map":{"version":3,"names":["Loader","props","selectedState","type","String","required","data","map","stateLayer","watch","newVal","highlightState","mounted","loader","apiKey","version","load","then","mapOptions","center","lat","lng","zoom","google","maps","Map","document","getElementById","Data","methods","stateName","forEach","feature","remove","geoJsonUrl","loadGeoJson","getProperty","setStyle","fillColor","strokeWeight","fitBounds","getFeatureBounds","layer","bounds","LatLngBounds","geometry","getGeometry","forEachLatLng","latLng","extend"],"sources":["D:\\vibrant_project\\state-search-frontend\\src\\components\\MapView.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\" class=\"map-container\"></div>\r\n</template>\r\n\r\n<script>\r\n// Import the Google Maps API loader\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\n\r\nexport default {\r\n  props: {\r\n    // The selected state name passed from the parent component\r\n    selectedState: {\r\n      type: String,\r\n      required: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      map: null, // Google Maps instance\r\n      stateLayer: null, // Layer to display state boundaries\r\n    };\r\n  },\r\n  watch: {\r\n    // Watch for changes in the selected state and highlight it\r\n    selectedState(newVal) {\r\n      if (newVal) {\r\n        this.highlightState(newVal); // Call the method to highlight the selected state\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // Load the Google Maps API\r\n    const loader = new Loader({\r\n      apiKey: 'AIzaSyB1-psa7VQjYCGqGVYsLJVrOfdnYOYQuFs',\r\n      version: 'weekly',\r\n    });\r\n\r\n    loader.load().then(() => {\r\n      // Initialize the map centered in the US\r\n      const mapOptions = {\r\n        center: { lat: 37.1, lng: -95.7 }, // Center of the US\r\n        zoom: 4,\r\n      };\r\n\r\n      // Create the Google Maps instance\r\n      this.map = new google.maps.Map(document.getElementById('map'), mapOptions);\r\n\r\n      // Create a Data layer to handle GeoJSON state boundaries\r\n      this.stateLayer = new google.maps.Data({ map: this.map });\r\n    });\r\n  },\r\n  methods: {\r\n    // Highlight the selected state on the map\r\n    highlightState(stateName) {\r\n      if (!this.map || !this.stateLayer) return;\r\n\r\n      // Remove any previously highlighted state\r\n      this.stateLayer.forEach((feature) => {\r\n        this.stateLayer.remove(feature);\r\n      });\r\n\r\n      // Load GeoJSON data containing state boundaries\r\n      const geoJsonUrl = `https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json`;\r\n\r\n      // Load the GeoJSON and filter out all but the selected state\r\n      this.stateLayer.loadGeoJson(geoJsonUrl, null, () => {\r\n        this.stateLayer.forEach((feature) => {\r\n          if (feature.getProperty('name') !== stateName) {\r\n            this.stateLayer.remove(feature); // Remove non-matching states\r\n          }\r\n        });\r\n\r\n        // Style the selected state with a yellow fill and border\r\n        this.stateLayer.setStyle({\r\n          fillColor: 'yellow',\r\n          strokeWeight: 2,\r\n        });\r\n\r\n        // Adjust the map view to fit the bounds of the selected state\r\n        this.map.fitBounds(this.getFeatureBounds(this.stateLayer));\r\n      });\r\n    },\r\n\r\n    // Get the geographic bounds of a state from the Data layer\r\n    getFeatureBounds(layer) {\r\n      const bounds = new google.maps.LatLngBounds();\r\n      layer.forEach((feature) => {\r\n        const geometry = feature.getGeometry();\r\n        geometry.forEachLatLng((latLng) => {\r\n          bounds.extend(latLng); // Extend bounds to include each point in the geometry\r\n        });\r\n      });\r\n      return bounds;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#map {\r\n  width: 100%;\r\n  height: 500px;\r\n  margin-top: 50px;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}