{"ast":null,"code":"export default {\n  data() {\n    return {\n      searchTerm: '',\n      states: [],\n      filteredStates: [],\n      loading: false,\n      error: null\n    };\n  },\n  methods: {\n    async onSearch() {\n      if (this.searchTerm.length < 1) {\n        this.filteredStates = [];\n        return;\n      }\n      this.loading = true;\n      this.error = null;\n      const query = `\n        query {\n          states {\n            id\n            name\n          }\n        }\n      `;\n      try {\n        const response = await fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query\n          })\n        });\n        const {\n          data\n        } = await response.json();\n        this.states = data.states;\n        this.filteredStates = this.filterStates();\n      } catch (err) {\n        this.error = 'Failed to fetch states: ' + err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n    filterStates() {\n      const searchTermLower = this.searchTerm.toLowerCase();\n      return this.states.filter(state => state.name.toLowerCase().startsWith(searchTermLower));\n    },\n    highlightMatch(stateName) {\n      const searchTerm = this.searchTerm;\n      if (!searchTerm) return stateName;\n      const regex = new RegExp(`(${searchTerm})`, 'gi');\n      return stateName.replace(regex, '<strong>$1</strong>');\n    },\n    // Function to handle the selection of a state from the dropdown\n    selectState(stateName) {\n      this.searchTerm = stateName; // Autofill the search input with the clicked state name\n      this.filteredStates = []; // Clear the dropdown after selection\n    }\n  }\n};","map":{"version":3,"names":["data","searchTerm","states","filteredStates","loading","error","methods","onSearch","length","query","response","fetch","method","headers","body","JSON","stringify","json","filterStates","err","message","searchTermLower","toLowerCase","filter","state","name","startsWith","highlightMatch","stateName","regex","RegExp","replace","selectState"],"sources":["D:\\state_search_demo\\state-search-app\\src\\components\\StateSearch.vue"],"sourcesContent":["<template>\n  <div class=\"search-container\">\n    <div class=\"search-box\">\n      <input\n        v-model=\"searchTerm\"\n        @input=\"onSearch\"\n        placeholder=\"Type a state name\"\n        autocomplete=\"off\"\n      />\n      <ul v-if=\"filteredStates.length\" class=\"dropdown\">\n        <li v-for=\"state in filteredStates\" :key=\"state.id\" v-html=\"highlightMatch(state.name)\" @click=\"selectState(state.name)\">\n        </li>\n      </ul>\n    </div>\n    <div v-if=\"loading\">Loading...</div>\n    <div v-if=\"error\">{{ error }}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      searchTerm: '',\n      states: [],\n      filteredStates: [],\n      loading: false,\n      error: null,\n    };\n  },\n  methods: {\n    async onSearch() {\n      if (this.searchTerm.length < 1) {\n        this.filteredStates = [];\n        return;\n      }\n\n      this.loading = true;\n      this.error = null;\n\n      const query = `\n        query {\n          states {\n            id\n            name\n          }\n        }\n      `;\n\n      try {\n        const response = await fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query }),\n        });\n\n\n        const { data } = await response.json();\n        this.states = data.states;\n        this.filteredStates = this.filterStates();\n      } catch (err) {\n        this.error = 'Failed to fetch states: ' + err.message;\n      } finally {\n        this.loading = false;\n      }\n    },\n\n    filterStates() {\n      const searchTermLower = this.searchTerm.toLowerCase();\n      return this.states.filter(state =>\n        state.name.toLowerCase().startsWith(searchTermLower)\n      );\n    },\n\n    highlightMatch(stateName) {\n      const searchTerm = this.searchTerm;\n      if (!searchTerm) return stateName;\n\n      const regex = new RegExp(`(${searchTerm})`, 'gi');\n      return stateName.replace(regex, '<strong>$1</strong>');\n    },\n\n    // Function to handle the selection of a state from the dropdown\n    selectState(stateName) {\n      this.searchTerm = stateName; // Autofill the search input with the clicked state name\n      this.filteredStates = [];    // Clear the dropdown after selection\n    }\n  }\n};\n</script>\n\n<!-- Import CSS file -->\nimport './styles.css';\n\n"],"mappings":"AAoBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MACdC,MAAM,EAAE,EAAE;MACVC,cAAc,EAAE,EAAE;MAClBC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,QAAQA,CAAA,EAAG;MACf,IAAI,IAAI,CAACN,UAAU,CAACO,MAAK,GAAI,CAAC,EAAE;QAC9B,IAAI,CAACL,cAAa,GAAI,EAAE;QACxB;MACF;MAEA,IAAI,CAACC,OAAM,GAAI,IAAI;MACnB,IAAI,CAACC,KAAI,GAAI,IAAI;MAEjB,MAAMI,KAAI,GAAI;;;;;;;OAOb;MAED,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,+BAA+B,EAAE;UAC5DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEP;UAAM,CAAC;QAChC,CAAC,CAAC;QAGF,MAAM;UAAET;QAAK,IAAI,MAAMU,QAAQ,CAACO,IAAI,CAAC,CAAC;QACtC,IAAI,CAACf,MAAK,GAAIF,IAAI,CAACE,MAAM;QACzB,IAAI,CAACC,cAAa,GAAI,IAAI,CAACe,YAAY,CAAC,CAAC;MAC3C,EAAE,OAAOC,GAAG,EAAE;QACZ,IAAI,CAACd,KAAI,GAAI,0BAAyB,GAAIc,GAAG,CAACC,OAAO;MACvD,UAAU;QACR,IAAI,CAAChB,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAEDc,YAAYA,CAAA,EAAG;MACb,MAAMG,eAAc,GAAI,IAAI,CAACpB,UAAU,CAACqB,WAAW,CAAC,CAAC;MACrD,OAAO,IAAI,CAACpB,MAAM,CAACqB,MAAM,CAACC,KAAI,IAC5BA,KAAK,CAACC,IAAI,CAACH,WAAW,CAAC,CAAC,CAACI,UAAU,CAACL,eAAe,CACrD,CAAC;IACH,CAAC;IAEDM,cAAcA,CAACC,SAAS,EAAE;MACxB,MAAM3B,UAAS,GAAI,IAAI,CAACA,UAAU;MAClC,IAAI,CAACA,UAAU,EAAE,OAAO2B,SAAS;MAEjC,MAAMC,KAAI,GAAI,IAAIC,MAAM,CAAC,IAAI7B,UAAU,GAAG,EAAE,IAAI,CAAC;MACjD,OAAO2B,SAAS,CAACG,OAAO,CAACF,KAAK,EAAE,qBAAqB,CAAC;IACxD,CAAC;IAED;IACAG,WAAWA,CAACJ,SAAS,EAAE;MACrB,IAAI,CAAC3B,UAAS,GAAI2B,SAAS,EAAE;MAC7B,IAAI,CAACzB,cAAa,GAAI,EAAE,EAAK;IAC/B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}