{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"map\",\n  class: \"map-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","class","_createElementBlock","_hoisted_1"],"sources":["D:\\vibrant_project\\state-search-frontend\\src\\components\\MapView.vue"],"sourcesContent":["<template>\r\n  <div id=\"map\" class=\"map-container\"></div>\r\n</template>\r\n\r\n<script>\r\n// Import the Google Maps API loader\r\nimport { Loader } from '@googlemaps/js-api-loader';\r\n\r\nexport default {\r\n  props: {\r\n    // The selected state name passed from the parent component\r\n    selectedState: {\r\n      type: String,\r\n      required: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      map: null, // Google Maps instance\r\n      stateLayer: null, // Layer to display state boundaries\r\n    };\r\n  },\r\n  watch: {\r\n    // Watch for changes in the selected state and highlight it\r\n    selectedState(newVal) {\r\n      if (newVal) {\r\n        this.highlightState(newVal); // Call the method to highlight the selected state\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    // Load the Google Maps API\r\n    const loader = new Loader({\r\n      apiKey: 'AIzaSyB1-psa7VQjYCGqGVYsLJVrOfdnYOYQuFs',\r\n      version: 'weekly',\r\n    });\r\n\r\n    loader.load().then(() => {\r\n      // Initialize the map centered in the US\r\n      const mapOptions = {\r\n        center: { lat: 37.1, lng: -95.7 }, // Center of the US\r\n        zoom: 4,\r\n      };\r\n\r\n      // Create the Google Maps instance\r\n      this.map = new google.maps.Map(document.getElementById('map'), mapOptions);\r\n\r\n      // Create a Data layer to handle GeoJSON state boundaries\r\n      this.stateLayer = new google.maps.Data({ map: this.map });\r\n    });\r\n  },\r\n  methods: {\r\n    // Highlight the selected state on the map\r\n    highlightState(stateName) {\r\n      if (!this.map || !this.stateLayer) return;\r\n\r\n      // Remove any previously highlighted state\r\n      this.stateLayer.forEach((feature) => {\r\n        this.stateLayer.remove(feature);\r\n      });\r\n\r\n      // Load GeoJSON data containing state boundaries\r\n      const geoJsonUrl = `https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json`;\r\n\r\n      // Load the GeoJSON and filter out all but the selected state\r\n      this.stateLayer.loadGeoJson(geoJsonUrl, null, () => {\r\n        this.stateLayer.forEach((feature) => {\r\n          if (feature.getProperty('name') !== stateName) {\r\n            this.stateLayer.remove(feature); // Remove non-matching states\r\n          }\r\n        });\r\n\r\n        // Style the selected state with a yellow fill and border\r\n        this.stateLayer.setStyle({\r\n          fillColor: 'yellow',\r\n          strokeWeight: 2,\r\n        });\r\n\r\n        // Adjust the map view to fit the bounds of the selected state\r\n        this.map.fitBounds(this.getFeatureBounds(this.stateLayer));\r\n      });\r\n    },\r\n\r\n    // Get the geographic bounds of a state from the Data layer\r\n    getFeatureBounds(layer) {\r\n      const bounds = new google.maps.LatLngBounds();\r\n      layer.forEach((feature) => {\r\n        const geometry = feature.getGeometry();\r\n        geometry.forEachLatLng((latLng) => {\r\n          bounds.extend(latLng); // Extend bounds to include each point in the geometry\r\n        });\r\n      });\r\n      return bounds;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#map {\r\n  width: 100%;\r\n  height: 500px;\r\n  margin-top: 50px;\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC,KAAK;EAACC,KAAK,EAAC;;;uBAApBC,mBAAA,CAA0C,OAA1CC,UAA0C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}