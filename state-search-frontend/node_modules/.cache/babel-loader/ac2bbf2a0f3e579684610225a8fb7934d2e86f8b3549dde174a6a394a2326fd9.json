{"ast":null,"code":"import { vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"search-container\"\n};\nconst _hoisted_2 = {\n  class: \"search-box\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"dropdown\"\n};\nconst _hoisted_4 = [\"innerHTML\", \"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchTerm = $event),\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.onSearch && $options.onSearch(...args)),\n    placeholder: \"Search\"\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.searchTerm]]), _createCommentVNode(\" Dropdown list \"), _ctx.filteredStates.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.filteredStates, state => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: state.id,\n      innerHTML: $options.highlightMatch(state.name),\n      onClick: $event => $options.selectState(state.name)\n    }, null, 8 /* PROPS */, _hoisted_4);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_cache","$event","$data","searchTerm","onInput","args","$options","onSearch","placeholder","_createCommentVNode","_ctx","filteredStates","length","_hoisted_3","_Fragment","_renderList","state","id","innerHTML","highlightMatch","name","onClick","selectState","_hoisted_4"],"sources":["D:\\vibrant_project\\state-search-frontend\\src\\components\\StateSearch.vue"],"sourcesContent":["<template>\n  <div class=\"search-container\">\n    <div class=\"search-box\">\n      <input\n        v-model=\"searchTerm\"\n        @input=\"onSearch\"\n        placeholder=\"Search\"\n\n      />\n      <!-- Dropdown list -->\n      <ul v-if=\"filteredStates.length\" class=\"dropdown\">\n        <li\n          v-for=\"state in filteredStates\"\n          :key=\"state.id\"\n          v-html=\"highlightMatch(state.name)\"\n          @click=\"selectState(state.name)\"\n        >\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      searchTerm: '', \n      states: [],          \n      loading: false,      \n      error: null,         \n    };\n  },\n  methods: {\n    // Triggers when the user types into the search input\n    async onSearch() {\n\n      if (this.searchTerm.length < 1) {\n        this.filteredStates = [];\n        return;\n      }\n\n      // Set loading to true and clear any previous error\n      this.loading = true;\n      this.error = null;\n\n      // GraphQL query to fetch the list of states\n      const query = `\n        query {\n          states {\n            id\n            name\n          }\n        }\n      `;\n      // Send GraphQL request to the server\n      try {\n        \n        const response = await fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query }),\n        });\n\n\n        // Parse the JSON response and update the states array\n        const { data } = await response.json();\n        this.states = data.states;\n        this.filteredStates = this.filterStates();  // Filter states based on the search term\n      } catch (err) {\n        // Handle any errors that occur during fetching\n        this.error = 'Failed to fetch states: ' + err.message;\n      } finally {\n  \n        this.loading = false;\n      }\n    },\n\n    // Filter the states based on the search term\n    filterStates() {\n      const searchTermLower = this.searchTerm.toLowerCase();  \n      return this.states.filter(state =>\n        state.name.toLowerCase().startsWith(searchTermLower) \n      );\n    },\n\n    // Highlight matching text in the state names\n    highlightMatch(stateName) {\n      const searchTerm = this.searchTerm;\n\n\n      // Match the search term in a case-insensitive way\n      const regex = new RegExp(`(${searchTerm})`, 'gi');\n      return stateName.replace(regex, '<strong>$1</strong>');  \n    },\n\n    // When a state is selected from the dropdown\n    selectState(stateName) {\n      this.$emit('state-selected', stateName);  \n      this.searchTerm = stateName;              \n      this.filteredStates = [];                 \n    }\n  }\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;EACtBA,KAAK,EAAC;AAAY;;EAF3BC,GAAA;EAUuCD,KAAK,EAAC;;mBAV7C;;uBACEE,mBAAA,CAmBM,OAnBNC,UAmBM,GAlBJC,mBAAA,CAiBM,OAjBNC,UAiBM,G,gBAhBJD,mBAAA,CAKE;IARR,uBAAAE,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAIiBC,KAAA,CAAAC,UAAU,GAAAF,MAAA;IAClBG,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,QAAA,IAAAD,QAAA,CAAAC,QAAA,IAAAF,IAAA,CAAQ;IAChBG,WAAW,EAAC;iEAFHN,KAAA,CAAAC,UAAU,E,GAKrBM,mBAAA,mBAAsB,EACZC,IAAA,CAAAC,cAAc,CAACC,MAAM,I,cAA/BhB,mBAAA,CAQK,MARLiB,UAQK,I,kBAPHjB,mBAAA,CAMKkB,SAAA,QAjBbC,WAAA,CAY0BL,IAAA,CAAAC,cAAc,EAAvBK,KAAK;yBADdpB,mBAAA,CAMK;MAJFD,GAAG,EAAEqB,KAAK,CAACC,EAAE;MACdC,SAAmC,EAA3BZ,QAAA,CAAAa,cAAc,CAACH,KAAK,CAACI,IAAI;MAChCC,OAAK,EAAApB,MAAA,IAAEK,QAAA,CAAAgB,WAAW,CAACN,KAAK,CAACI,IAAI;4BAfxCG,UAAA;sCAAAd,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}