{"ast":null,"code":"// Import the Loader from '@googlemaps/js-api-loader'\nimport { Loader } from '@googlemaps/js-api-loader';\nexport default {\n  props: {\n    selectedState: {\n      type: String,\n      required: false\n    }\n  },\n  data() {\n    return {\n      map: null,\n      stateLayer: null // To store the state boundaries\n    };\n  },\n  watch: {\n    selectedState(newVal) {\n      if (newVal) {\n        this.highlightState(newVal); // Highlight state whenever it changes\n      }\n    }\n  },\n  mounted() {\n    const loader = new Loader({\n      apiKey: 'AIzaSyB1-psa7VQjYCGqGVYsLJVrOfdnYOYQuFs',\n      version: 'weekly'\n    });\n    loader.load().then(() => {\n      // eslint-disable-next-line no-undef\n      const mapOptions = {\n        center: {\n          lat: 37.1,\n          lng: -95.7\n        },\n        // Centered in the US\n        zoom: 4\n      };\n\n      // eslint-disable-next-line no-undef\n      this.map = new google.maps.Map(document.getElementById('map'), mapOptions);\n    });\n  },\n  methods: {\n    // Fetch GeoJSON data and highlight the state\n    highlightState(stateName) {\n      if (!this.map) return;\n\n      // Clear any existing data layer\n      if (this.stateLayer) {\n        this.stateLayer.setMap(null); // Remove previous layers\n      }\n\n      // Load state boundary GeoJSON from a remote source (e.g., GeoJSON file or Google service)\n      const geoJsonUrl = `https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json`; // Example GeoJSON source\n\n      // eslint-disable-next-line no-undef\n      this.stateLayer = new google.maps.Data({\n        map: this.map\n      });\n\n      // Load GeoJSON data\n      this.stateLayer.loadGeoJson(geoJsonUrl, null, features => {\n        // Filter only the feature that matches the selected state\n        this.stateLayer.forEach(feature => {\n          if (feature.getProperty('name') !== stateName) {\n            this.stateLayer.remove(feature); // Remove non-matching states\n          }\n        });\n\n        // Style the selected state boundary\n        this.stateLayer.setStyle({\n          fillColor: 'yellow',\n          strokeWeight: 2\n        });\n\n        // Zoom in on the selected state\n        this.map.fitBounds(this.getFeatureBounds(this.stateLayer));\n      });\n    },\n    // Helper function to get the bounds of a GeoJSON feature\n    getFeatureBounds(layer) {\n      const bounds = new google.maps.LatLngBounds();\n      layer.forEach(feature => {\n        const geometry = feature.getGeometry();\n        geometry.forEachLatLng(latLng => {\n          bounds.extend(latLng);\n        });\n      });\n      return bounds;\n    }\n  }\n};","map":{"version":3,"names":["Loader","props","selectedState","type","String","required","data","map","stateLayer","watch","newVal","highlightState","mounted","loader","apiKey","version","load","then","mapOptions","center","lat","lng","zoom","google","maps","Map","document","getElementById","methods","stateName","setMap","geoJsonUrl","Data","loadGeoJson","features","forEach","feature","getProperty","remove","setStyle","fillColor","strokeWeight","fitBounds","getFeatureBounds","layer","bounds","LatLngBounds","geometry","getGeometry","forEachLatLng","latLng","extend"],"sources":["D:\\state_search_demo\\state-search-app\\src\\components\\MapView.vue"],"sourcesContent":["<template>\r\n    <div id=\"map\" class=\"map-container\"></div>\r\n  </template>\r\n  \r\n  <script>\r\n  // Import the Loader from '@googlemaps/js-api-loader'\r\n  import { Loader } from '@googlemaps/js-api-loader';\r\n  \r\n  export default {\r\n    props: {\r\n      selectedState: {\r\n        type: String,\r\n        required: false,\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        map: null,\r\n        stateLayer: null, // To store the state boundaries\r\n      };\r\n    },\r\n    watch: {\r\n      selectedState(newVal) {\r\n        if (newVal) {\r\n          this.highlightState(newVal); // Highlight state whenever it changes\r\n        }\r\n      }\r\n    },\r\n    mounted() {\r\n      const loader = new Loader({\r\n        apiKey: 'AIzaSyB1-psa7VQjYCGqGVYsLJVrOfdnYOYQuFs',\r\n        version: 'weekly',\r\n      });\r\n  \r\n      loader.load().then(() => {\r\n        // eslint-disable-next-line no-undef\r\n        const mapOptions = {\r\n          center: { lat: 37.1, lng: -95.7 }, // Centered in the US\r\n          zoom: 4,\r\n        };\r\n  \r\n        // eslint-disable-next-line no-undef\r\n        this.map = new google.maps.Map(document.getElementById('map'), mapOptions);\r\n      });\r\n    },\r\n    methods: {\r\n      // Fetch GeoJSON data and highlight the state\r\n      highlightState(stateName) {\r\n        if (!this.map) return;\r\n  \r\n        // Clear any existing data layer\r\n        if (this.stateLayer) {\r\n          this.stateLayer.setMap(null); // Remove previous layers\r\n        }\r\n  \r\n        // Load state boundary GeoJSON from a remote source (e.g., GeoJSON file or Google service)\r\n        const geoJsonUrl = `https://raw.githubusercontent.com/PublicaMundi/MappingAPI/master/data/geojson/us-states.json`; // Example GeoJSON source\r\n  \r\n        // eslint-disable-next-line no-undef\r\n        this.stateLayer = new google.maps.Data({ map: this.map });\r\n  \r\n        // Load GeoJSON data\r\n        this.stateLayer.loadGeoJson(geoJsonUrl, null, (features) => {\r\n          // Filter only the feature that matches the selected state\r\n          this.stateLayer.forEach((feature) => {\r\n            if (feature.getProperty('name') !== stateName) {\r\n              this.stateLayer.remove(feature); // Remove non-matching states\r\n            }\r\n          });\r\n  \r\n          // Style the selected state boundary\r\n          this.stateLayer.setStyle({\r\n            fillColor: 'yellow',\r\n            strokeWeight: 2,\r\n          });\r\n  \r\n          // Zoom in on the selected state\r\n          this.map.fitBounds(this.getFeatureBounds(this.stateLayer));\r\n        });\r\n      },\r\n  \r\n      // Helper function to get the bounds of a GeoJSON feature\r\n      getFeatureBounds(layer) {\r\n        const bounds = new google.maps.LatLngBounds();\r\n        layer.forEach((feature) => {\r\n          const geometry = feature.getGeometry();\r\n          geometry.forEachLatLng((latLng) => {\r\n            bounds.extend(latLng);\r\n          });\r\n        });\r\n        return bounds;\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  #map {\r\n    width: 100%;\r\n    height: 500px;\r\n    margin-top: 50px;\r\n  }\r\n  </style>\r\n  "],"mappings":"AAKE;AACA,SAASA,MAAK,QAAS,2BAA2B;AAElD,eAAe;EACbC,KAAK,EAAE;IACLC,aAAa,EAAE;MACbC,IAAI,EAAEC,MAAM;MACZC,QAAQ,EAAE;IACZ;EACF,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE,IAAI;MACTC,UAAU,EAAE,IAAI,CAAE;IACpB,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLP,aAAaA,CAACQ,MAAM,EAAE;MACpB,IAAIA,MAAM,EAAE;QACV,IAAI,CAACC,cAAc,CAACD,MAAM,CAAC,EAAE;MAC/B;IACF;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,MAAMC,MAAK,GAAI,IAAIb,MAAM,CAAC;MACxBc,MAAM,EAAE,yCAAyC;MACjDC,OAAO,EAAE;IACX,CAAC,CAAC;IAEFF,MAAM,CAACG,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM;MACvB;MACA,MAAMC,UAAS,GAAI;QACjBC,MAAM,EAAE;UAAEC,GAAG,EAAE,IAAI;UAAEC,GAAG,EAAE,CAAC;QAAK,CAAC;QAAE;QACnCC,IAAI,EAAE;MACR,CAAC;;MAED;MACA,IAAI,CAACf,GAAE,GAAI,IAAIgB,MAAM,CAACC,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,EAAET,UAAU,CAAC;IAC5E,CAAC,CAAC;EACJ,CAAC;EACDU,OAAO,EAAE;IACP;IACAjB,cAAcA,CAACkB,SAAS,EAAE;MACxB,IAAI,CAAC,IAAI,CAACtB,GAAG,EAAE;;MAEf;MACA,IAAI,IAAI,CAACC,UAAU,EAAE;QACnB,IAAI,CAACA,UAAU,CAACsB,MAAM,CAAC,IAAI,CAAC,EAAE;MAChC;;MAEA;MACA,MAAMC,UAAS,GAAI,8FAA8F,EAAE;;MAEnH;MACA,IAAI,CAACvB,UAAS,GAAI,IAAIe,MAAM,CAACC,IAAI,CAACQ,IAAI,CAAC;QAAEzB,GAAG,EAAE,IAAI,CAACA;MAAI,CAAC,CAAC;;MAEzD;MACA,IAAI,CAACC,UAAU,CAACyB,WAAW,CAACF,UAAU,EAAE,IAAI,EAAGG,QAAQ,IAAK;QAC1D;QACA,IAAI,CAAC1B,UAAU,CAAC2B,OAAO,CAAEC,OAAO,IAAK;UACnC,IAAIA,OAAO,CAACC,WAAW,CAAC,MAAM,MAAMR,SAAS,EAAE;YAC7C,IAAI,CAACrB,UAAU,CAAC8B,MAAM,CAACF,OAAO,CAAC,EAAE;UACnC;QACF,CAAC,CAAC;;QAEF;QACA,IAAI,CAAC5B,UAAU,CAAC+B,QAAQ,CAAC;UACvBC,SAAS,EAAE,QAAQ;UACnBC,YAAY,EAAE;QAChB,CAAC,CAAC;;QAEF;QACA,IAAI,CAAClC,GAAG,CAACmC,SAAS,CAAC,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACnC,UAAU,CAAC,CAAC;MAC5D,CAAC,CAAC;IACJ,CAAC;IAED;IACAmC,gBAAgBA,CAACC,KAAK,EAAE;MACtB,MAAMC,MAAK,GAAI,IAAItB,MAAM,CAACC,IAAI,CAACsB,YAAY,CAAC,CAAC;MAC7CF,KAAK,CAACT,OAAO,CAAEC,OAAO,IAAK;QACzB,MAAMW,QAAO,GAAIX,OAAO,CAACY,WAAW,CAAC,CAAC;QACtCD,QAAQ,CAACE,aAAa,CAAEC,MAAM,IAAK;UACjCL,MAAM,CAACM,MAAM,CAACD,MAAM,CAAC;QACvB,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,OAAOL,MAAM;IACf;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}