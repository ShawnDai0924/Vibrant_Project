{"ast":null,"code":"export default {\n  data() {\n    return {\n      searchTerm: '',\n      // Holds the current search term entered by the user\n      states: [],\n      // Array to hold all states fetched from the server\n      filteredStates: [],\n      // Array to hold filtered states based on search input\n      loading: false,\n      // Flag to indicate if data is being loaded\n      error: null // Holds any error message encountered during fetching\n    };\n  },\n  methods: {\n    // Method triggered when the user types into the search input\n    async onSearch() {\n      // Clear filteredStates if the search term is too short\n      if (this.searchTerm.length < 1) {\n        this.filteredStates = [];\n        return;\n      }\n\n      // Set loading to true and clear any previous error\n      this.loading = true;\n      this.error = null;\n\n      // GraphQL query to fetch the list of states\n      const query = `\n        query {\n          states {\n            id\n            name\n          }\n        }\n      `;\n      try {\n        // Send GraphQL request to the server\n        const response = await fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query\n          })\n        });\n\n        // Check if the response is OK\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        // Parse the JSON response and update the states array\n        const {\n          data\n        } = await response.json();\n        this.states = data.states;\n        this.filteredStates = this.filterStates(); // Filter states based on the search term\n      } catch (err) {\n        // Handle any errors that occur during fetching\n        this.error = 'Failed to fetch states: ' + err.message;\n      } finally {\n        // Set loading to false once the operation completes\n        this.loading = false;\n      }\n    },\n    // Method to filter the states based on the search term\n    filterStates() {\n      const searchTermLower = this.searchTerm.toLowerCase(); // Convert search term to lowercase for case-insensitive matching\n      return this.states.filter(state => state.name.toLowerCase().startsWith(searchTermLower) // Filter states that start with the search term\n      );\n    },\n    // Method to highlight matching text in the state names\n    highlightMatch(stateName) {\n      const searchTerm = this.searchTerm;\n      if (!searchTerm) return stateName; // If no search term, return the full state name\n\n      // Create a regular expression to match the search term in a case-insensitive way\n      const regex = new RegExp(`(${searchTerm})`, 'gi');\n      return stateName.replace(regex, '<strong>$1</strong>'); // Wrap matching text in <strong> tags for bold effect\n    },\n    // Method to handle when a state is selected from the dropdown\n    selectState(stateName) {\n      this.$emit('state-selected', stateName); // Emit the selected state to the parent component\n      this.searchTerm = stateName; // Set the search input to the selected state\n      this.filteredStates = []; // Clear the dropdown after selection\n    }\n  }\n};","map":{"version":3,"names":["data","searchTerm","states","filteredStates","loading","error","methods","onSearch","length","query","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","filterStates","err","message","searchTermLower","toLowerCase","filter","state","name","startsWith","highlightMatch","stateName","regex","RegExp","replace","selectState","$emit"],"sources":["D:\\state_search_demo\\state-search-app\\src\\components\\StateSearch.vue"],"sourcesContent":["<template>\n  <div class=\"search-container\">\n    <div class=\"search-box\">\n      <!-- Input field to search for a state -->\n      <input\n        v-model=\"searchTerm\"\n        @input=\"onSearch\"\n        placeholder=\"Type a state name\"\n        autocomplete=\"off\"\n      />\n      <!-- Dropdown list showing filtered states -->\n      <ul v-if=\"filteredStates.length\" class=\"dropdown\">\n        <li\n          v-for=\"state in filteredStates\"\n          :key=\"state.id\"\n          v-html=\"highlightMatch(state.name)\"\n          @click=\"selectState(state.name)\"\n        >\n        </li>\n      </ul>\n    </div>\n\n    <!-- Display a loading message while data is being fetched -->\n    <div v-if=\"loading\">Loading...</div>\n    <!-- Display an error message if there's an error -->\n    <div v-if=\"error\">{{ error }}</div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      searchTerm: '',      // Holds the current search term entered by the user\n      states: [],          // Array to hold all states fetched from the server\n      filteredStates: [],  // Array to hold filtered states based on search input\n      loading: false,      // Flag to indicate if data is being loaded\n      error: null,         // Holds any error message encountered during fetching\n    };\n  },\n  methods: {\n    // Method triggered when the user types into the search input\n    async onSearch() {\n      // Clear filteredStates if the search term is too short\n      if (this.searchTerm.length < 1) {\n        this.filteredStates = [];\n        return;\n      }\n\n      // Set loading to true and clear any previous error\n      this.loading = true;\n      this.error = null;\n\n      // GraphQL query to fetch the list of states\n      const query = `\n        query {\n          states {\n            id\n            name\n          }\n        }\n      `;\n\n      try {\n        // Send GraphQL request to the server\n        const response = await fetch('http://localhost:8080/graphql', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ query }),\n        });\n\n        // Check if the response is OK\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n\n        // Parse the JSON response and update the states array\n        const { data } = await response.json();\n        this.states = data.states;\n        this.filteredStates = this.filterStates();  // Filter states based on the search term\n      } catch (err) {\n        // Handle any errors that occur during fetching\n        this.error = 'Failed to fetch states: ' + err.message;\n      } finally {\n        // Set loading to false once the operation completes\n        this.loading = false;\n      }\n    },\n\n    // Method to filter the states based on the search term\n    filterStates() {\n      const searchTermLower = this.searchTerm.toLowerCase();  // Convert search term to lowercase for case-insensitive matching\n      return this.states.filter(state =>\n        state.name.toLowerCase().startsWith(searchTermLower)  // Filter states that start with the search term\n      );\n    },\n\n    // Method to highlight matching text in the state names\n    highlightMatch(stateName) {\n      const searchTerm = this.searchTerm;\n      if (!searchTerm) return stateName;  // If no search term, return the full state name\n\n      // Create a regular expression to match the search term in a case-insensitive way\n      const regex = new RegExp(`(${searchTerm})`, 'gi');\n      return stateName.replace(regex, '<strong>$1</strong>');  // Wrap matching text in <strong> tags for bold effect\n    },\n\n    // Method to handle when a state is selected from the dropdown\n    selectState(stateName) {\n      this.$emit('state-selected', stateName);  // Emit the selected state to the parent component\n      this.searchTerm = stateName;              // Set the search input to the selected state\n      this.filteredStates = [];                 // Clear the dropdown after selection\n    }\n  }\n};\n</script>\n"],"mappings":"AA8BA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,EAAE;MAAO;MACrBC,MAAM,EAAE,EAAE;MAAW;MACrBC,cAAc,EAAE,EAAE;MAAG;MACrBC,OAAO,EAAE,KAAK;MAAO;MACrBC,KAAK,EAAE,IAAI,CAAU;IACvB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,QAAQA,CAAA,EAAG;MACf;MACA,IAAI,IAAI,CAACN,UAAU,CAACO,MAAK,GAAI,CAAC,EAAE;QAC9B,IAAI,CAACL,cAAa,GAAI,EAAE;QACxB;MACF;;MAEA;MACA,IAAI,CAACC,OAAM,GAAI,IAAI;MACnB,IAAI,CAACC,KAAI,GAAI,IAAI;;MAEjB;MACA,MAAMI,KAAI,GAAI;;;;;;;OAOb;MAED,IAAI;QACF;QACA,MAAMC,QAAO,GAAI,MAAMC,KAAK,CAAC,+BAA+B,EAAE;UAC5DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEP;UAAM,CAAC;QAChC,CAAC,CAAC;;QAEF;QACA,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;;QAEA;QACA,MAAM;UAAElB;QAAK,IAAI,MAAMU,QAAQ,CAACS,IAAI,CAAC,CAAC;QACtC,IAAI,CAACjB,MAAK,GAAIF,IAAI,CAACE,MAAM;QACzB,IAAI,CAACC,cAAa,GAAI,IAAI,CAACiB,YAAY,CAAC,CAAC,EAAG;MAC9C,EAAE,OAAOC,GAAG,EAAE;QACZ;QACA,IAAI,CAAChB,KAAI,GAAI,0BAAyB,GAAIgB,GAAG,CAACC,OAAO;MACvD,UAAU;QACR;QACA,IAAI,CAAClB,OAAM,GAAI,KAAK;MACtB;IACF,CAAC;IAED;IACAgB,YAAYA,CAAA,EAAG;MACb,MAAMG,eAAc,GAAI,IAAI,CAACtB,UAAU,CAACuB,WAAW,CAAC,CAAC,EAAG;MACxD,OAAO,IAAI,CAACtB,MAAM,CAACuB,MAAM,CAACC,KAAI,IAC5BA,KAAK,CAACC,IAAI,CAACH,WAAW,CAAC,CAAC,CAACI,UAAU,CAACL,eAAe,EAAG;MACxD,CAAC;IACH,CAAC;IAED;IACAM,cAAcA,CAACC,SAAS,EAAE;MACxB,MAAM7B,UAAS,GAAI,IAAI,CAACA,UAAU;MAClC,IAAI,CAACA,UAAU,EAAE,OAAO6B,SAAS,EAAG;;MAEpC;MACA,MAAMC,KAAI,GAAI,IAAIC,MAAM,CAAC,IAAI/B,UAAU,GAAG,EAAE,IAAI,CAAC;MACjD,OAAO6B,SAAS,CAACG,OAAO,CAACF,KAAK,EAAE,qBAAqB,CAAC,EAAG;IAC3D,CAAC;IAED;IACAG,WAAWA,CAACJ,SAAS,EAAE;MACrB,IAAI,CAACK,KAAK,CAAC,gBAAgB,EAAEL,SAAS,CAAC,EAAG;MAC1C,IAAI,CAAC7B,UAAS,GAAI6B,SAAS,EAAe;MAC1C,IAAI,CAAC3B,cAAa,GAAI,EAAE,EAAkB;IAC5C;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}